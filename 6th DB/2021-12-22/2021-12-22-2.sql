/*
    ORDER BY ==> Sorting

    SELECT COLUMNS, VALUE, SUB-QUERY
    FROM   TABLE, SUB-QUERY
    WHERE  == IF
    ORDER BY COLUMN ASC     ... 오름차순(생략가능)
                    DESC    ... 내림차순
*/

SELECT FIRST_NAME, SALARY FROM EMPLOYEES
ORDER BY SALARY ASC;

SELECT FIRST_NAME, SALARY FROM EMPLOYEES
ORDER BY SALARY DESC;

----- ALIAS
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY * 12 ANNUAL FROM EMPLOYEES
ORDER BY ANNUAL DESC;

---- NULL FIRST / NULL LAST
SELECT COMMISSION_PCT FROM EMPLOYEES
ORDER BY COMMISSION_PCT NULLS LAST;

SELECT COMMISSION_PCT, SALARY FROM EMPLOYEES
ORDER BY COMMISSION_PCT NULLS LAST, SALARY DESC;

SELECT HIRE_DATE, SALARY, JOB_ID FROM EMPLOYEES
ORDER BY HIRE_DATE ASC, SALARY DESC;

SELECT JOB_ID, SALARY FROM EMPLOYEES
ORDER BY JOB_ID ASC, SALARY DESC;

SELECT DISTINCT JOB_ID FROM EMPLOYEES;  -- 단순한 중복항목 제거, 조건을 붙이기가 어려워, 폭넓지 못한 사용법
-- 그!래!서!!

/*
    GROUP BY : 그룹으로 묶는 기능
    HAVING L 그룹으로 묶은 후 조건(WHERE는 묶기 전 조건)
*/

SELECT DEPARTMENT_ID FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
ORDER BY DEPARTMENT_ID ASC;

SELECT JOB_ID FROM EMPLOYEES
GROUP BY JOB_ID
ORDER BY JOB_ID ASC;

/*
    통계 - 그룹함수
    COUNT - 개수
    SUM - 더하기
    AVG - 평균
    MAX - 최대값
    MIN - 최소값
*/

SELECT JOB_ID, COUNT(*), SUM(SALARY), AVG(SALARY), MAX(SALARY), MIN(SALARY) FROM EMPLOYEES
GROUP BY JOB_ID;

SELECT JOB_ID, COUNT(*), SUM(SALARY), AVG(SALARY) FROM EMPLOYEES
GROUP BY JOB_ID
HAVING SUM(SALARY) >= 100000;       -- 데이터 묶고 조건 걸 때는 HAVING

-- EXAMPLE
-- 급여가 5000이상인 사원만으로 합계를 내서 job_id로 그룹화하여 급여의 합계가 20000을 초과하는 job_id를 구하여라.
SELECT JOB_ID, SUM(SALARY) FROM EMPLOYEES
WHERE SALARY >= 5000
group by JOB_ID
HAVING SUM(SALARY) >= 20000;